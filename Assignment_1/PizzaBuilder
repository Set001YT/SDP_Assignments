package SDP_Assignment_1;

/*The Builder Class - This helps us build a Pizza step by step */

public class PizzaBuilder {
    // Required fields (must be set)
    private String size;
    private String crust;
    private String name;

    // Optional fields (have default values)
    private boolean hasCheese = true;  // Most pizzas have cheese
    private boolean hasPepperoni = false;
    private boolean hasMushrooms = false;
    private boolean hasOlives = false;

    // Constructor requires the essential parts
    public PizzaBuilder(String name, String size, String crust) {
        // Clean Code: Validate required inputs immediately
        if (isEmptyOrNull(name)) {
            throw new IllegalArgumentException("Pizza name cannot be empty!");
        }
        if (isEmptyOrNull(size)) {
            throw new IllegalArgumentException("Pizza size cannot be empty!");
        }
        if (isEmptyOrNull(crust)) {
            throw new IllegalArgumentException("Pizza crust cannot be empty!");
        }

        this.name = name;
        this.size = size;
        this.crust = crust;
    }

    // Methods to add toppings (each returns 'this' for chaining)
    public PizzaBuilder addCheese() {
        this.hasCheese = true;
        return this;
    }

    public PizzaBuilder removeCheese() {
        this.hasCheese = false;
        return this;
    }

    public PizzaBuilder addPepperoni() {
        this.hasPepperoni = true;
        return this;
    }

    public PizzaBuilder addMushrooms() {
        this.hasMushrooms = true;
        return this;
    }

    public PizzaBuilder addOlives() {
        this.hasOlives = true;
        return this;
    }

    // The final step - build the actual Pizza
    public Pizza build() {
        validatePizza();  // Check if pizza makes sense
        return new Pizza(name, size, crust, hasCheese, hasPepperoni, hasMushrooms, hasOlives);
    }

    // Helper method to check for empty strings (Clean Code: meaningful names)
    private boolean isEmptyOrNull(String text) {
        return text == null || text.trim().isEmpty();
    }

    // Validate the pizza before building (Clean Code: separate concerns)
    private void validatePizza() {
        // Business rule: A pizza must have at least one topping
        if (!hasCheese && !hasPepperoni && !hasMushrooms && !hasOlives) {
            throw new IllegalStateException("Pizza must have at least one topping!");
        }
    }
}
